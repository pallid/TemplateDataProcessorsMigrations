#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает сведения о внешней обработке.
Функция СведенияОВнешнейОбработке() Экспорт
		
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.2.2.1");
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.Наименование = "Шаблон обработки для выполнения миграция и настроек по локальным и облачным базам";
	ПараметрыРегистрации.Версия = "20.09.23";
	ПараметрыРегистрации.Информация = НСтр("ru = 'Пример шаблона обработки для выполнения миграция и настроек по локальным и облачным базам
												 |репозиторий: https://github.com/pallid/TemplateDataProcessorsMigrations'");
	ПараметрыРегистрации.БезопасныйРежим = Истина;
			
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ВыполнитьНастройки(АдресХранилища) Экспорт
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	Области = Результат.Области;
	ИмяФайлаЛогирования = Результат.ИмяФайлаЛогирования;
    ПолныйПутьФайлЛогирования = КаталогВременныхФайлов() + ИмяФайлаЛогирования; 
	
	Для каждого ТекущаяОбласть Из Области Цикл
		
		РезультатОбласти = Новый Структура("ПротоколРаботы, ЕстьОшибки", Новый Массив, Ложь); 
		РезультатОбласти.ПротоколРаботы.Добавить("///////////////////////////////////////////////////////////");

		Попытка
			пОбласть = Число(ТекущаяОбласть);
		Исключение
			РезультатОбласти.ПротоколРаботы.Добавить(СтрШаблон("- не удалось преобразовать область %1 к числу", ТекущаяОбласть));
			РезультатОбласти.ПротоколРаботы.Добавить(СтрШаблон("- работы по области %1 не выполнены", ТекущаяОбласть));
			РезультатОбласти.ЕстьОшибки = Истина;
		    Продолжить;
		КонецПопытки; 
				
		////
		УстановитьПривилегированныйРежим(Истина);
		РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Истина, пОбласть);
		ЗаписьЖурналаРегистрации("ДополнительныеОтчетыОбработки.ШаблонОбработкиМиграции", УровеньЖурналаРегистрации.Примечание,,,"начало работы с областью (" +пОбласть+") "+ ТекущаяДата());
		РезультатОбласти.ПротоколРаботы.Добавить("- начало работы с областью (" +пОбласть+") "+ ТекущаяДата());

		////		
		
		ВыполнитьНастройкиСлужебная(РезультатОбласти, пОбласть);
		
		////
		РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Ложь);
		УстановитьПривилегированныйРежим(Ложь);
		ЗаписьЖурналаРегистрации("ДополнительныеОтчетыОбработки.ШаблонОбработкиМиграции", УровеньЖурналаРегистрации.Примечание,,,"окончание работы с областью (" +пОбласть+") "+ ТекущаяДата());
		РезультатОбласти.ПротоколРаботы.Добавить("- окончание работы с областью (" +пОбласть+") "+ ТекущаяДата());
		
		////
		
		Результат.ЕстьОшибки = РезультатОбласти.ЕстьОшибки;

		Текст = Новый ЗаписьТекста();
    	Текст.Открыть(ПолныйПутьФайлЛогирования, КодировкаТекста.UTF8, Символы.ПС, Истина,);
		
		Для каждого СтрокаСообщения из РезультатОбласти.ПротоколРаботы Цикл
			 Текст.ЗаписатьСтроку(СтрокаСообщения, Символы.ПС); 
		КонецЦикла;
		 
		Текст.Закрыть();
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура ВыполнитьНастройкиСлужебная(Результат, пОбласть=Неопределено) Экспорт
	
	Попытка
		// Вставить код с полезной нагрузкой
		Результат.ПротоколРаботы.Добавить("Информационное сообщение положительного результата работы");
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Результат.ПротоколРаботы.Добавить(ТекстОшибки);
		Результат.ЕстьОшибки = Истина;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли