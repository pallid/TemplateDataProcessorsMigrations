#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПолучтьВерсиюБСП();
	
	ПроверитьИспользованиеОбластейДанных();
	
	Элементы.ГруппаРазделенныеДанные.Видимость = Объект.РазделениеВключено;
	
	Если Объект.РазделениеВключено Тогда
		ВариантОбработкиРазделенныхДанных = "ВыборочныеОбласти";
	КонецЕсли;	
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьНастройки(Команда)
	
	СоздатьФайлПротоколаЛогированияНаСервере();
	СтрокаЛогирования = "";
	ЕстьОшибки = Ложь;
	ВыполнитьНастройкиПорционно();	
	ПрочитатьПротоколЛогирования();
	
	Сообщить(СтрШаблон("Настройки выполнены%1", ?(ЕстьОшибки," с ошибками","")));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНастройкиПорционно()
	
	НачалоОбработки = ТекущаяДата();
	
	Если Объект.РазделениеВключено Тогда
		МассивОбъектов = ПолучитьСписокОбластей();
	Иначе
		МассивОбъектов = новый Массив;
		МассивОбъектов.Добавить("0"); // локальная область
	КонецЕсли;
	
	КоличествоОбластей = МассивОбъектов.Количество();
	Если КоличествоОбластей = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выполнение настроект прервано, количество обрабатываемых областей должно быть больше нуля");
		Возврат;
	КонецЕсли;	
	
	// Управление отображением индикатора прогресса
	Элементы.ИндикаторВыполнения.МаксимальноеЗначение = КоличествоОбластей;
	ИндикаторВыполнения = 0;
	Шаблон = "Обработка области %1 - начало обработки области: %2. Отработано %3 областей, в очереди %4";
	Счетчик = 0;
	ОбратныйСчетчик = КоличествоОбластей;

	РазмерПорцииДанныхДляОбработки = 1;
	
	МассивПорции = Новый Массив;
	НомерПорции = 0; // Справочная информация
	ПараметрыОбработки = Новый Структура("НомерПорции, МассивДокументов");
	
	Для Каждого СтрокаМассива из МассивОбъектов Цикл
		
		МассивПорции.Добавить(СтрокаМассива);
		Если МассивПорции.Количество() >= РазмерПорцииДанныхДляОбработки Тогда
			
			ДатаНачалаОбработкиПорции = ТекущаяДата();
			ТекстСообщенияСостояния = СтрШаблон(Шаблон, СтрокаМассива, ДатаНачалаОбработкиПорции, Счетчик, ОбратныйСчетчик);
			Структура = Новый Структура("ЕстьОшибки, Области, ИмяФайлаЛогирования", Ложь, МассивПорции, ИмяФайлаЛогирования); 
			АдресХранилища = ПолучитьАдресВременногоХранилища(Структура);
			ВыполнитьНастройкиНаСервере(АдресХранилища);
			ПолучитьИнформациюПоПорции(АдресХранилища);
									
			МассивПорции.Очистить();
			
			НомерПорции = НомерПорции + 1;
			Счетчик = Счетчик + 1;
			ОбратныйСчетчик = ОбратныйСчетчик - 1;
		    ДобавитьИтерациюИндикатора();
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверяем, не осталось ли полученных, но незаписанных данных
	Если МассивПорции.Количество() > 0 Тогда
		
		ДатаНачалаОбработкиПорции = ТекущаяДата();
		ТекстСообщенияСостояния = СтрШаблон(Шаблон, СтрокаМассива, ДатаНачалаОбработкиПорции);

		Структура = Новый Структура("ЕстьОшибки, Области, ИмяФайлаЛогирования", Ложь, МассивПорции, ИмяФайлаЛогирования);  
		АдресХранилища = ПолучитьАдресВременногоХранилища(Структура);
		ВыполнитьНастройкиНаСервере(АдресХранилища);
		ПолучитьИнформациюПоПорции(АдресХранилища);
		ДобавитьИтерациюИндикатора();
		
	КонецЕсли;
	
	КонецОбработки = ТекущаяДата();
	КоличествоСекунд = КонецОбработки - НачалоОбработки;
	ТекстСообщенияСостояния = СтрШаблон("Обработано %1 областей, общее время %2", Счетчик, ВремяВыполнения(КоличествоСекунд));
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьИнформациюПоПорции(АдресХранилища)
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если Результат.ЕстьОшибки Тогда
		ЕстьОшибки = Результат.ЕстьОшибки;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьНастройкиНаСервере(АдресХранилища)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ВыполнитьНастройкиНаСервереБезКонтекста(ОбработкаОбъект, АдресХранилища);	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыполнитьНастройкиНаСервереБезКонтекста(ОбработкаОбъект, АдресХранилища)
	ОбработкаОбъект.ВыполнитьНастройки(АдресХранилища);	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОбработкиРазделенныхДанныхПриИзменении(Элемент)
	ВариантОбработкиРазделенныхДанныхПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВариантОбработкиРазделенныхДанныхПриИзмененииНаСервере()
	
	Если ВариантОбработкиРазделенныхДанных = "ВсеОбласти" Тогда
		ВидимостьСтрокаОбластей = Ложь;
	Иначе
		ВидимостьСтрокаОбластей = Истина;
	КонецЕсли;
	
	Элементы.СтрокаОбластей.Видимость = ВидимостьСтрокаОбластей;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьФайлПротоколаЛогированияНаСервере() 

	ИмяФайлаЛогирования = "migrations_issuse_" + Новый УникальныйИдентификатор + ".log";
	ПолныйПутьФайлЛогирования = КаталогВременныхФайлов() + ИмяФайлаЛогирования; 
	Текст = Новый ЗаписьТекста(ПолныйПутьФайлЛогирования);
    Текст.Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьПротоколЛогирования()

	ПолныйПутьФайлЛогирования = КаталогВременныхФайлов() + ИмяФайлаЛогирования; 
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ПолныйПутьФайлЛогирования);
	СтрокаЛогирования = Текст.Прочитать();
	
	Текст.Закрыть();
	УдалитьФайлы(ПолныйПутьФайлЛогирования);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПолучтьВерсиюБСП()
	
	ПолнаяВерсияБСП = СтандартныеПодсистемыСервер.ВерсияБиблиотеки();
	МассивПолнаяВерсияБСП = СтрРазделить(ПолнаяВерсияБСП, ".");
	
	ВерхняяВерсияМассив = Новый Массив;
	ВерхняяВерсияМассив.Добавить(МассивПолнаяВерсияБСП[0]);
	ВерхняяВерсияМассив.Добавить(МассивПолнаяВерсияБСП[1]);
	
	ВерсияБСП = СтрСоединить(ВерхняяВерсияМассив, ".");
		
КонецПроцедуры

Процедура ПроверитьИспользованиеОбластейДанных()
	
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	Объект.РазделениеВключено = РазделениеВключено;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресВременногоХранилища(Данные)
	
	Возврат ПоместитьВоВременноеХранилище(Данные, Новый УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Функция ПолучитьСписокОбластей()

	Если ВариантОбработкиРазделенныхДанных = "ВсеОбласти" Тогда
		МассивОбластей = ПолучитьВсеОбластиБазы();
	Иначе	
		Области = СтрЗаменить(Объект.СтрокаОбластей, " ", "");
		МассивОбластей = СтрРазделить(Области, ",", Ложь);
	КонецЕсли;	
	
	Возврат МассивОбластей;
	
КонецФункции

&НаСервере
Функция ПолучитьВсеОбластиБазы()
	
	Запрос = Новый Запрос("ВЫБРАТЬ                          
                           |    ОбластиДанных.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанных
                           |ИЗ
                           |    РегистрСведений.ОбластиДанных КАК ОбластиДанных
                           |ГДЕ
                           |    ОбластиДанных.Статус = Значение(Перечисление.СтатусыОбластейДанных.Используется)");

     ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	 
	 МассивОбластей = ТаблицаРезультат.ВыгрузитьКолонку("ОбластьДанных");
	 
	 Возврат МассивОбластей; 
	
КонецФункции	

&НаКлиенте
Процедура ДобавитьИтерациюИндикатора()
	
	ИндикаторВыполнения = ИндикаторВыполнения + 1;
	ЭтаФорма.ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Функция ВремяВыполнения(Секунд)
	
	Часов=Цел(Секунд/3600);
	СекОстМин= Секунд % 3600;    
	Минут=Цел(СекОстМин/60);
	Сек=СекОстМин % 60;
	Если Часов<10 Тогда
		Часов="0"+СокрЛП(Часов);
	Иначе
		Часов=СокрЛП(Часов);    
	КонецЕсли;
	Если Минут<10 Тогда
		Минут="0"+СокрЛП(Минут);
	Иначе
		Минут=СокрЛП(Минут);    
	КонецЕсли;
	Если Сек<10 Тогда
		Сек="0"+СокрЛП(Сек);
	Иначе
		Сек=СокрЛП(Сек);    
	КонецЕсли;
		
	Время=Часов+":"+Минут+":"+Сек;
	
	Возврат Время;
	
КонецФункции

#КонецОбласти
